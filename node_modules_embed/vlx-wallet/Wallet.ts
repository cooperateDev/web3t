import VelasCrypto from "./Crypto/index.js";
import Wallet from "./Crypto/Wallet.js";
import { VLXtoSatoshi } from "./Crypto/utils.js";
import * as bigInt from "big-integer";

const COMMISSION = 100000;

export default class {

    static async fromSeedAsync(seed, path) {
        let vc = await VelasCrypto.init();
        return vc.keysGen.fromSeed(seed, 'm/' + path + '\'').toWallet();
    }

    static fromSeed(seed, path) {
        return VelasCrypto.init().then(vc=>{
            return vc.keysGen.fromSeed(seed, 'm/' + path + '\'');//.toWallet();
        });
    }

    static IsValidAddress(address) {
        return Wallet.IsValidAddress(address);
    }

    static tx(unspent, seed, pathIndex, address, amount) {
        const un = unspent.map(out => ({ ...out, value: bigInt(out.value) }))
        return VelasCrypto.init().then(vc => {
            const hdKeys = vc.keysGen.fromSeed(seed, 'm/' + pathIndex + '\'');
            const wallet = hdKeys.toWallet();

            const txUnsigned = vc.tx.generate(
                un,
                VLXtoSatoshi(amount),
                hdKeys,
                wallet.Base58Address,
                address,
                bigInt(COMMISSION)
            );

            return txUnsigned.sign();
        });

    }

}
