import { BigInteger } from "big-integer";

const M = 100000000;
const MCountSymbols = 9;
import * as bigInt from 'big-integer';

export const satoshiToVLX = (value: number): number => {
	return value / M;
};

export const VLXtoSatoshi = (value: number): BigInteger => {
	const str = value.toString();
	const dotIndex = str.indexOf('.');
	if (dotIndex == -1) {
		return bigInt(value).multiply(bigInt(M));
	}
	let strConverted = str.replace('.', '');
	if (str.indexOf('0.') === 0) {
		strConverted = str.replace('0.', '');
	}

	if (MCountSymbols - str.length + dotIndex < 0) throw new Error('value smaller then satoshi');
	const strConverted2 = addZeroToEnd(strConverted, MCountSymbols - str.length + dotIndex);
	return bigInt(strConverted2);
};

const addZeroToEnd = (str: string, count: number): string => {
	let newStr = str;
	for (let i = 0; i < count; i++) {
		newStr += '0';
	}
	return newStr;
};

export const BigIntToBufferLE = (val: BigInteger, size: number): Buffer => {
	const arr = val.toArray(256).value;
	const buf = Buffer.alloc(size);
	buf.set(arr.reverse());
	return buf
};
