import * as bs58 from 'bs58';
import { BigInteger } from "big-integer";
import { BigIntToBufferLE } from "../utils";

export class ContractMessageDto<T> {
    sender: string;         // [26]byte
    address: string;        // [26]byte
    payload: string;        // []byte
    commission: T; // uint64
    value: T;      // uint64

    constructor(sender: string, address: string, payload: string, value: T, commission: T) {
        this.sender = sender;
        this.address = address;
        this.payload = payload;
        this.commission = commission;
        this.value = value;
    }
}

export class ContractMessage extends ContractMessageDto<BigInteger> {

    ToBytes(): Buffer {
        const sender = bs58.decode(this.sender); // Buffer.from(this.sender, 'hex');
        const payload = Buffer.from(this.payload, 'hex');
        const value = BigIntToBufferLE(this.value, 8);
        const commission = BigIntToBufferLE(this.commission, 8);

        let addr = Buffer.alloc(0);
        if (this.address != null && this.address != '') {
            addr = bs58.decode(this.address); // Buffer.from(this.address, 'hex');
        }

        return Buffer.concat([sender, payload, value, commission, addr]);
    }

}

export class StateTransition {
    address: string;        // [26]byte
    in: string;             // string
    out: string;            // string
    requester: string;      // [26]byte
    message_index: number;  // uint32
    commission: number;     // uint64
}

export class ContractDataDto<T> {
    messages: ContractMessageDto<T>[] = [];
    state_transitions: StateTransition[];
}

export class ContractData extends ContractDataDto<BigInteger> {

    messages: ContractMessage[] = [];

    public MsgForSignUser() : Buffer {
        return this.messages.reduce((res, msg) => Buffer.concat([res, msg.ToBytes()]), Buffer.alloc(0));
    }
}
