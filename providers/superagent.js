// Generated by LiveScript 1.6.0
(function(){
  var superagent, crossFetch, ref$, keys, each, corsService, makeRandom, tryProxy, addSets, tryWithPow, buildRequest, post, put, get, out$ = typeof exports != 'undefined' && exports || this;
  superagent = require('./superagent-adapter.js');
  crossFetch = require('cross-fetch');
  ref$ = require('prelude-ls'), keys = ref$.keys, each = ref$.each;
  corsService = {
    get: function(arg$, cb){
      var args, type, instance;
      args = arg$.args, type = arg$.type;
      instance = superagent.get("https://cors-anywhere.herokuapp.com/" + args[0], args[1]);
      if (type != null) {
        instance.type(type);
      }
      return instance.timeout({
        deadline: 5000
      }).end(cb);
    }
  };
  makeRandom = function(length){
    var max;
    if (length === 0) {
      return 0;
    }
    max = length - 1;
    return Math.round(Math.random() * max);
  };
  tryProxy = function(arg$, cb){
    var method, args, type, err, set, num, instance;
    method = arg$.method, args = arg$.args, type = arg$.type, err = arg$.err, set = arg$.set;
    num = makeRandom(proxyServers.length);
    if (superagent[method] == null) {
      return cb(err);
    }
    instance = superagent[method](args[0], args[1]);
    instance.proxy(proxyServers[num]);
    if (type != null) {
      instance.type(type);
    }
    addSets(instance, set);
    return instance.timeout({
      deadline: 10000
    }).end(function(err2, data){
      var m;
      if (!err2) {
        return cb(null, data);
      }
      m = corsService[method];
      if (m == null) {
        return cb(err, data);
      }
      if (m != null) {
        return m({
          args: args,
          type: type
        }, cb);
      }
      return cb(err, data);
    });
  };
  addSets = function(instance, sets){
    if (sets == null) {
      return;
    }
    return each(function(it){
      return instance.set(it, sets[it]);
    })(
    keys(
    sets));
  };
  tryWithPow = function(instance, data, cb){
    var nonce, complexity;
    nonce = data.headers['pow-nonce'];
    complexity = data.headers['pow-complexity'];
    return cb("Not Implemented");
    if (typeof err != 'undefined' && err !== null) {
      return cb(err);
    }
    return instance.set('pow-result', result).end(cb);
  };
  buildRequest = function(method){
    return function(){
      var args, res$, i$, to$, originalRequest, $;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      originalRequest = superagent[method];
      $ = {};
      $.timeout = function(timeout){
        $._timeout = timeout;
        return $;
      };
      $.type = function(type){
        $._type = type;
        return $;
      };
      $.set = function(name, value){
        var ref$;
        $._set = (ref$ = $._set) != null
          ? ref$
          : {};
        $._set[name] = value;
        return $;
      };
      $.end = function(cb){
        var instance;
        instance = originalRequest.apply(originalRequest, args);
        if ($._type != null) {
          instance.type($._type);
        }
        if ($._timeout != null) {
          instance.timeout($._timeout);
        }
        addSets(instance, $._set);
        return instance.end(function(err, data){
          if ((data != null ? data.status : void 8) === 401 && data.headers['www-authenticate'] === 'pow') {
            return tryWithPow(instance, data, cb);
          }
          if ((data != null ? data.status : void 8) >= 400) {
            return cb(err, data);
          }
          return cb(err, data);
        });
      };
      return $;
    };
  };
  out$.post = post = buildRequest('post');
  out$.put = put = buildRequest('put');
  out$.get = get = buildRequest('get');
}).call(this);
